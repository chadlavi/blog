I"Ã<p>I originally created this blog as an excuse to experiment with <a href="https://jamstack.org/">the JAM stack</a>, but I quickly realized I didnâ€™t really need any CRUD functionality; itâ€™s just a blog, no forms or uploads to speak of. The initial code for that never made it to a git repo, and frankly didnâ€™t get too far past an <code class="highlighter-rouge">npx create-react-app</code>.</p>

<p>I still wanted to create a fast, responsive, accessible site thatâ€™s templatized and just needs markdown changes to create new stuff. My <a href="https://github.com/chadlavi/chadlavimoniere.com">old blog</a> was an experiment in using the LAMP stack to do something sort of like this, but it was really cumbersome; I ended up storing the markdown content for the posts in a MySQL database, so it was still fairly technologically intensive to update.</p>

<h2 id="jekyll--github-pages">Jekyll + GitHub Pages</h2>

<p>Thatâ€™s when I realized that Jekyll and GitHub Pages would probably be a good fit for this. Iâ€™d used both at work (Jekyll for an abortive first-stab at a company-wide branding guide site; GitHub Pages to host the documentation for my component libraries), but had always used them with a workflow like this:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>develop stuff locally
  |
  V
do a manual build locally
  |
  V
push build artifacts to GitHub Pages
</code></pre></div></div>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">foo</span> <span class="o">=</span> <span class="p">(</span><span class="nx">v</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">v</span> <span class="o">**</span> <span class="mi">2</span>
</code></pre></div></div>

<p>It was somewhat convenient. Jekyll let me write content in markdown, which made it way more portable and way more approachable to non-tech folks. GitHub Pages is free, pretty much infrastructure-less, and well-documented. But the need to manually build then push build artifacts to a hosting environment seemed like a rough edge I could sand off.</p>

<h2 id="adding-travis-ci">Adding Travis CI</h2>

<p>Never do something yourself that a robot can do for you. The steps to build and deploy a Jekyll site on GitHub Pages were repetitive, so I went looking for a robot who could do it for me.</p>

<p>I went with Travis CI because it has great integration into GitHub, and is also free and relatively infrastructure-less.</p>

<p>The basic setup was pretty simple: I connected my Travis CI and GitHub accounts, added my GitHub access token to Travis CIâ€™s secrets manager, and created a <code class="highlighter-rouge">.travis.yml</code> file.</p>

<h2 id="caching">Caching</h2>

<p>Probably the most important improvement I made in the whole process was to set up Travis CI to cache correctly! I ended up <a href="https://docs.travis-ci.com/user/caching#cache-rvm-ruby-version-for-non-ruby-projects">doing this</a>:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">cache</span><span class="pi">:</span>
  <span class="na">directories</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s">/home/travis/.rvm/</span>
</code></pre></div></div>

<p>It reduced my total build times from an average of 3 minutes 20 seconds to an average of 45 seconds, or about four times faster.</p>

<figure>
  <img src="/images/faster-builds.png" alt="screenshot showing two markedly different build times; 3 minutes and 28 seconds before this change, versus 46 seconds after." />
  <figcaption>The <a href="https://travis-ci.org/chadlavi/blog/builds/605132241">last build before the change</a> had an install time of 153.21 seconds; the <a href="https://travis-ci.org/chadlavi/blog/builds/605134945">first build after the change</a> had an install time of <i>0.38 seconds</i>. That's roughly 400 times faster.</figcaption>
</figure>

<p>You can see the full build log for this blog at <a href="https://travis-ci.org/chadlavi/blog/builds">https://travis-ci.org/chadlavi/blog/builds</a>.</p>

<h2 id="new-workflow">New workflow</h2>

<p>I actually completely composed this blog post (and even added the image above) <em>directly in the text editor on GitHub</em>. With Travis CI set up to automatically run builds whenever new changes are committed on the master branch of this repository, I can basically treat the <em>Create new file</em> text input like itâ€™s a markdown-specific CMS.</p>

<p>Iâ€™m anticipating that this is going to mean a lot more freedom in how I can add new blog posts or edit existing ones in the future; the only thing I canâ€™t do directly from GitHub is preview changes accurately, or change more than one file per commit. This will probably mean sort of a separation of concerns: markdown I can compose and upload from anywhere, but template or infrastructure changes will still need a more traditional dev setup.</p>
:ET